    <form action="/Home/AddEvent" method="post" id="edit-form" class="animated fadeIn">

    <div class="form-group">
        @if (ViewBag.EventId != null)
        {

            <input type="hidden" name="EventId" value="@ViewBag.EventId" />
        }

        <label for="eventName">Название</label>
        <input name="Name" type="text" class="form-control" id="eventName" placeholder="Введите название"
               value="@if (ViewBag.EventName != null)
                       {
                           @ViewBag.EventName
                       }" required />
    </div>

    <div class="form-group">
        <label for="datetimepickerStart">Начало</label>
        <div class='input-group date' id='datetimepickerStart'>
            <input name="StartDate" type='text' class="form-control" id="startEvent" value="@ViewBag.EventStartDate" required />
            <span class="input-group-addon" style="padding: 6px 16px;">
                <span class="glyphicon glyphicon-calendar"></span>
            </span>
        </div>
    </div>
    <div class="form-group">
        <label for="datetimepickerEnd">Конец</label>
        <div class='input-group date' id='datetimepickerEnd'>
            <input id="endEvent" name="EndDate" type='text' class="form-control"
                   value="@if (ViewBag.EventEndDate != null)
                       {
                           @ViewBag.EventEndDate
                       }" required />

            <span class="input-group-addon" style="padding: 6px 16px;">
                <span class="glyphicon glyphicon-calendar"></span>
            </span>
        </div>
    </div>





    <div class="form-group">
        <label for="descrEvent">Описание</label>
        <textarea name="Description" type="text" class="form-control" id="descrEvent" placeholder="Введите описание">
                  @if (ViewBag.EventDescr != null)
                       {
                           @ViewBag.EventDescr
                       }</textarea>
    </div>

    <div class="form-group">


        <div style="display: none;max-width:600px; padding:5px" id="modalInEvent">
            <h3>Выберете местоположение!</h3>
            <div id="mapSelectEventLocation" style="width:500px; height:500px;"></div>
            <p><button data-fancybox-close class="btn btn-success">Добавть</button></p>
        </div>

        @*<a class="btn btn-xs btn-primary openMapSelectLocation" data-fancybox data-modal="true" data-src="#modalInEvent" href="javascript:;">
            <i class="glyphicon glyphicon-plus"></i>
        </a>
        <label for="descrEvent">Местоположение : </label><br>
        <span id="textEventLocationAddress">...</span>*@


        <a  class="btn-link openMapSelectLocation" data-fancybox data-modal="true" data-src="#modalInEvent" href="javascript:;" style="cursor:pointer">


            <label style="font-size:14px; cursor:inherit; color:#333333">
                
                Местоположение <i class="glyphicon glyphicon-map-marker"></i> :
                <span id="textEventLocationAddress" style=" color:#818181; font-size:13px; font-weight:100">...</span>&nbsp;

            </label>
        </a>



        <input type="hidden" name="Latitude" id="latitude-input" />
        <input type="hidden" name="Longitude" id="longitude-input" />
        <input type="hidden" name="WeatherType" id="weatherType-input" />
        @if (ViewBag.IsEditForm != null && ViewBag.IsEditForm == true && ViewBag.Event.WeatherNight != null)
        {
            <input type="hidden" name="WeatherRegion" id="weatherRegion-input" value="@ViewBag.Event.WeatherRegion" />
            <input type="hidden" name="WeatherNight" id="weatherNight-input" value="@ViewBag.Event.WeatherNight" />
            <input type="hidden" name="WeatherDay" id="weatherDay-input" value="@ViewBag.Event.WeatherDay" />
        }
        else
        {
            <input type="hidden" name="WeatherRegion" id="weatherRegion-input" />
            <input type="hidden" name="WeatherNight" id="weatherNight-input" />
            <input type="hidden" name="WeatherDay" id="weatherDay-input" />
        }




    </div>


    @if (ViewBag.IsEditForm != null && ViewBag.IsEditForm == true)
    { }
    else
    {

        <div class="form-group">

            <div class="dropdown" style="display:inline-block;">
                <button class="btn btn-xs btn-primary dropdown-toggle" type="button" data-toggle="dropdown">
                    <i class="glyphicon glyphicon-plus"></i>
                </button>
                <ul class="dropdown-menu scrollable-dropdown">
                    <input class="form-control" id="inputUserName" type="text" placeholder="Имя пользователя" />
                    @if (ViewBag.Usernames != null)
                    {

                        foreach (string userName in ViewBag.Usernames)
                        {
                            <li style="cursor:pointer"><a class="dropdown-item">@userName</a></li>
                        }

                    }

                </ul>
            </div>
            <label>Приглашенные пользватели </label>
            <input type="hidden" name="InvitedUsers" id="invited-users" />
            <div id="invited-users">
                <ul class="list-group" id="invited-users-list">
                </ul>
            </div>

            <div>
                <ul>
                </ul>
            </div>
        </div>
    }




    <hr>

    <button type="submit" class="btn btn-success">

        @if (ViewBag.IsEditForm != null && ViewBag.IsEditForm == true)
        {
            <Text>Сохранить</Text>
        }
        else
        {
            <Text>Добавить</Text>
        }
    </button>

    @if (ViewBag.IsEditForm != null && ViewBag.IsEditForm == true)
    {
        <button type="button" class="btn btn-default" style="float:right;margin-right:30px;" onclick="GetInfoEventForm(@ViewBag.EventId)">Отмена</button>
    }
</form>


           

    <script type="text/javascript">

        var invitedUsers = [];

        delButton = '<button type = "button" class="btn btn-default btn-xs pull-right remove-item" onclick="$(this).parent().remove()"><span class="glyphicon glyphicon-remove"></span></button>'

        $(function () {

            $("#inputUserName").on("keyup", function() {
                var value = $(this).val().toLowerCase();
                $(".dropdown-menu li").filter(function() {
                  $(this).toggle($(this).text().toLowerCase().indexOf(value) > -1)
                });
              });


            $("#edit-form").submit(function (e) {
                e.preventDefault();

                list_items = $("#invited-users-list > li");
                    var users =[];
                    if (list_items.length != 0) {
                        $.each(list_items, function (index, value) {
                            users.push(value.innerText)
                        })
                }
                $('#invited-users').val(users);
                    

                   
                @if(ViewBag.IsEditForm != null && ViewBag.IsEditForm == true)
                {
                    <Text> EditEventEndEditCalendar($(this));</Text>
                }
                else
                {
                   <Text> AddEventEndEditCalendar($(this));</Text>
                }
                 
            });

        

            $('#datetimepickerStart').datetimepicker(
                {
                    minDate: '08.04.1999',
                    maxDate: '08.04.2099',
                    locale: 'ru'
                }
            );
            $('#datetimepickerEnd').datetimepicker({
                minDate: '08.04.1999',
                    maxDate: '08.04.2099',
                    locale: 'ru',
                    useCurrent: false
            });

            checkValidDatePicker();

            $("#datetimepickerStart").on("dp.change", function (e) {
                $('#datetimepickerEnd').data("DateTimePicker").minDate(e.date);
            });

            $("#datetimepickerEnd").on("dp.change", function (e) {
                $('#datetimepickerStart').data("DateTimePicker").maxDate(e.date);
            });

        });

        $('.dropdown-item').on('click', function (e) {
            list_items = $("#invited-users-list > li");
            var users =[];
            if (list_items.length != 0) {
                $.each(list_items, function (index, value) {
                    users.push(value.innerText)
                })
            }

            if (users.indexOf(e.target.innerText) == -1)
                $("#invited-users-list").append("<li class='list-group-item' >" + e.target.innerText + delButton + "</li>");
        });
        
    //Местоположение fancybox

        $('.openMapSelectLocation').fancybox({

            // Other options like size go here
            afterShow: function () {
            }
        });
        ymaps.ready(init);
        
        function init(){
            var myPlacemark, eventSelectMap = new ymaps.Map("mapSelectEventLocation", {
                center: [53.89, 27.56],
                zoom: 6,
                controls: ['zoomControl', 'searchControl', 'typeSelector', 'rulerControl', 'geolocationControl']
            }, {
                // Ограничим область карты.
                restrictMapArea: [[50, 21], [58, 34]]
            });

            // { ограничить страной
            ymaps.borders.load('001', {
                lang: 'ru',
                quality: 2
            }).then(function (result) {

                // Создадим многоугольник, который будет скрывать весь мир, кроме заданной страны.
                var background = new ymaps.Polygon([
                    [
                        [85, -179.99],
                        [85, 179.99],
                        [-85, 179.99],
                        [-85, -179.99],
                        [85, -179.99]
                    ]
                ], {}, {
                    fillColor: '#66666666',
                    strokeWidth: 0,
                    // Для того чтобы полигон отобразился на весь мир, нам нужно поменять
                    // алгоритм пересчета координат геометрии в пиксельные координаты.
                    coordRendering: 'straightPath'
                });

                // Найдём страну по её iso коду.
                var region = result.features.filter(function (feature) { return feature.properties.iso3166 == 'BY'; })[0];

                // Добавим координаты этой страны в полигон, который накрывает весь мир.
                // В полигоне образуется полость, через которую будет видно заданную страну.
                var masks = region.geometry.coordinates;
                masks.forEach(function (mask) {
                    background.geometry.insert(1, mask);
                });

                // Добавим многоугольник на карту.
                eventSelectMap.geoObjects.add(background);
            })
            // } ограничить страной




            @if(ViewBag.EventLatitude != null && ViewBag.EventLongitude != null)
            { <Text>
                 myPlacemark = createPlacemark([@ViewBag.EventLatitude, @ViewBag.EventLongitude]);
                    eventSelectMap.geoObjects.add(myPlacemark);
                    // Слушаем событие окончания перетаскивания на метке.
                    myPlacemark.events.add('dragend', function () {
                        getAddress(myPlacemark.geometry.getCoordinates());
                    });
                    $('#latitude-input').val(@ViewBag.EventLatitude);              
                    $('#longitude-input').val(@ViewBag.EventLongitude);

                    ymaps.geocode(myPlacemark.geometry._coordinates).then(function (res) {
                        var firstGeoObject = res.geoObjects.get(0);

                        var addressString = [
                               firstGeoObject.getLocalities().length ? firstGeoObject.getLocalities() : firstGeoObject.getAdministrativeAreas(),
                               firstGeoObject.getThoroughfare() || firstGeoObject.getPremise()
                            ].filter(Boolean).join(', ');

                        $("#textEventLocationAddress").text(firstGeoObject.getAddressLine());

                        myPlacemark.properties
                            .set({
                            iconCaption: addressString,
                                // В качестве контента балуна задаем строку с адресом объекта.
                                balloonContent: firstGeoObject.getAddressLine()
                            });
                    });



             </Text>
            }
            eventSelectMap.events.add('click', function (e) {
                var coords = e.get('coords');

                // Если метка уже создана – просто передвигаем ее.
                if (myPlacemark) {
                    myPlacemark.geometry.setCoordinates(coords);
                }
                // Если нет – создаем.
                else {
                    myPlacemark = createPlacemark(coords);
                    eventSelectMap.geoObjects.add(myPlacemark);
                    // Слушаем событие окончания перетаскивания на метке.
                    myPlacemark.events.add('dragend', function () {
                        getAddress(myPlacemark.geometry.getCoordinates());
                    });
                }
                $('#latitude-input').val(coords[0]);              
                $('#longitude-input').val(coords[1]);
                
                getAddress(coords);
            });



            // Создание метки.
            function createPlacemark(coords) {
                return new ymaps.Placemark(coords, {
                    iconCaption: 'поиск...'
                }, {
                    preset: 'islands#violetDotIconWithCaption',
                    draggable: true
                });
            }
            // Определяем адрес по координатам (обратное геокодирование).
            function getAddress(coords) {
                myPlacemark.properties.set('iconCaption', 'поиск...');
                ymaps.geocode(coords).then(function (res) {
                    var firstGeoObject = res.geoObjects.get(0);
                    
                    $("#textEventLocationAddress").text(firstGeoObject.getAddressLine());

                    $("#weatherRegion-input").val(GetEngRegionNaimFromAddress(firstGeoObject.getAddressLine()));

                    myPlacemark.properties
                        .set({
                    // Формируем строку с данными об объекте.
                    iconCaption: [
                        // Название населенного пункта или вышестоящее административно-территориальное образование.
                        firstGeoObject.getLocalities().length ? firstGeoObject.getLocalities() : firstGeoObject.getAdministrativeAreas(),
                        // Получаем путь до топонима, если метод вернул null, запрашиваем наименование здания.
                        firstGeoObject.getThoroughfare() || firstGeoObject.getPremise()
                    ].filter(Boolean).join(', '),
                            // В качестве контента балуна задаем строку с адресом объекта.
                            balloonContent: firstGeoObject.getAddressLine()
                        });
                });
            }

        }
    //



    </script>
